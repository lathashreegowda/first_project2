{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"-1viKe0VMYnh","executionInfo":{"status":"ok","timestamp":1669789298894,"user_tz":-330,"elapsed":37139,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"66923d61-f979-42ab-c916-f6674c71870a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-588bd236-d341-4279-a57a-e310d33a3675\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-588bd236-d341-4279-a57a-e310d33a3675\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving Salary_Data.csv to Salary_Data.csv\n"]}],"source":["from google.colab import files\n","\n","\n","uploaded = files.upload()"]},{"cell_type":"code","source":["import numpy as np \n","import pandas as pd \n","from sklearn.model_selection import train_test_split\n","from sklearn import datasets\n","import matplotlib.pyplot as plt\n","\n","import os\n","for dirname, _, filenames in os.walk('../input/years-of-experience-and-salary-dataset'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","\n"],"metadata":{"id":"jrcbhylWMvof"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dataset= pd.read_csv('Salary_Data.csv')"],"metadata":{"id":"PuNRtTaJM9R6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dataset.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"bckibKMnNWBj","executionInfo":{"status":"ok","timestamp":1669789488134,"user_tz":-330,"elapsed":14,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"3efb94b2-0e9e-45e2-aa4f-6e08af0e6773"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   YearsExperience   Salary\n","0              1.1  39343.0\n","1              1.3  46205.0\n","2              1.5  37731.0\n","3              2.0  43525.0\n","4              2.2  39891.0"],"text/html":["\n","  <div id=\"df-c473a067-fb4d-4c2e-b61f-51a23bf6a2b0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>YearsExperience</th>\n","      <th>Salary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.1</td>\n","      <td>39343.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.3</td>\n","      <td>46205.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.5</td>\n","      <td>37731.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.0</td>\n","      <td>43525.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.2</td>\n","      <td>39891.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c473a067-fb4d-4c2e-b61f-51a23bf6a2b0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c473a067-fb4d-4c2e-b61f-51a23bf6a2b0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c473a067-fb4d-4c2e-b61f-51a23bf6a2b0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["x=dataset.drop(columns='Salary', axis=1)\n","y=dataset['Salary']"],"metadata":{"id":"jvC9q2YaNc4z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fig =plt.figure(figsize=(8,6))\n","plt.scatter(x, y, color=\"b\", marker=\"o\", s=30)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":374},"id":"bNCQrGDLNhDy","executionInfo":{"status":"ok","timestamp":1669789525144,"user_tz":-330,"elapsed":1125,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"9c6062ef-b411-41e3-8443-39891e78d00e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 576x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["print('x shape  :  ', x.shape)\n","print('y shape  :  ', y.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oe3wDg8dNlgZ","executionInfo":{"status":"ok","timestamp":1669789541920,"user_tz":-330,"elapsed":5,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"8316c477-b471-4c4d-f19a-99442d15ff98"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["x shape  :   (30, 1)\n","y shape  :   (30,)\n"]}]},{"cell_type":"code","source":["xtrain, xtest, ytrain, ytest= train_test_split(x, y, test_size=0.2, random_state=1234)"],"metadata":{"id":"m3jru_g7Np8S"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class linearRegression:\n","    def __init__(self, lr=0.001, itr=1000):\n","        self.lr = lr\n","        self.itr = itr\n","        self.weights = None\n","        self.bias = None\n","        \n","    def fit (self, x, y):\n","        m, n= x.shape\n","        self.w=np.zeros(n)\n","        self.b=0\n","        \n","        for _ in range(self.itr):\n","            ypred = np.dot(x, self.w)+ self.b\n","            \n","            dw= (1/m) * np.dot(x.T, (ypred - y)) \n","            db= (1/m) * np.sum(ypred - y)\n","            \n","            self.w-=self.lr * dw\n","            self.b -= self.lr * db\n","            \n","    def predict (self, x):\n","        yp = np.dot(x, self.w) + self.b\n","        return yp\n","  "],"metadata":{"id":"wdm8_JZ5N-B-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["reg=linearRegression()\n","reg.fit(x,y)\n","ypred=reg.predict(xtest)"],"metadata":{"id":"vPJo0eqUOCLS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def MSE(ytrue, ypred):\n","    return np.mean((ytrue- ypred)**2)\n","mse_v = MSE(ytest, ypred)\n","print(mse_v)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MlZii_7fOMfA","executionInfo":{"status":"ok","timestamp":1669789702184,"user_tz":-330,"elapsed":5,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"0d5f4052-6388-47d1-d1e6-d06e604b0544"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["202570633.40197492\n"]}]},{"cell_type":"code","source":["def score(ytrue, ypred):\n","    Cmatrix = np.corrcoef(ytrue, ypred)\n","    print(Cmatrix)\n","    corr = Cmatrix[0, 1]\n","    return corr ** 2\n","\n","print(score(ytest, ypred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fWjhf52tOQIQ","executionInfo":{"status":"ok","timestamp":1669789718077,"user_tz":-330,"elapsed":482,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"9cbe93a8-6f91-4133-9b91-9fc8939c8c1f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1.         0.98090331]\n"," [0.98090331 1.        ]]\n","0.9621712966155149\n"]}]},{"cell_type":"code","source":["y_pred_line = reg.predict(x)\n","cmap = plt.get_cmap(\"viridis\")\n","fig = plt.figure(figsize=(8, 6))\n","m1 = plt.scatter(xtrain, ytrain, color='b', s=30)\n","m2 = plt.scatter(xtest, ytest, color='g', s=30)\n","plt.plot(x, y_pred_line, color=\"red\", linewidth=2, label=\"Prediction\")\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":374},"id":"68j8ju-BOUGw","executionInfo":{"status":"ok","timestamp":1669789769742,"user_tz":-330,"elapsed":564,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"c79382c0-62eb-40b3-f8d1-f0134acc6ff6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 576x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}
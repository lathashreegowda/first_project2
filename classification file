{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNJjvGS3pTQENjB56rKEP1V"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"tWQ0UtnQtBFl","executionInfo":{"status":"ok","timestamp":1669093177797,"user_tz":-330,"elapsed":15007,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"681f0b82-a51c-474b-fd0c-66ba5fc5421a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-6ab8999f-a28c-416e-8c93-7c411550b0b7\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-6ab8999f-a28c-416e-8c93-7c411550b0b7\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving testset (1).csv to testset (1).csv\n"]}],"source":["from google.colab import files\n","\n","\n","uploaded = files.upload()"]},{"cell_type":"code","source":["from google.colab import files\n","\n","\n","uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"Q40m1M3muIJ4","executionInfo":{"status":"ok","timestamp":1669093476444,"user_tz":-330,"elapsed":9695,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"ae352e73-bbad-47b6-bdc9-eb3cbe04a5fc"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-0f3192ed-1789-4be2-bb31-98d679f0ce99\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-0f3192ed-1789-4be2-bb31-98d679f0ce99\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving trainset.csv to trainset.csv\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns"],"metadata":{"id":"AVcHdwHsvlfw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dataset_train = pd.read_csv(\"trainset.csv\")"],"metadata":{"id":"o-cOlGacvcGR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dataset_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"8HqymbDFvxIO","executionInfo":{"status":"ok","timestamp":1669093873358,"user_tz":-330,"elapsed":773,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"9ea35b25-e763-464d-e257-4ce48327edc2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            Date         Open         High          Low        Close  \\\n","0     2013-01-02   357.385559   361.151062   355.959839   359.288177   \n","1     2013-01-03   360.122742   363.600128   358.031342   359.496826   \n","2     2013-01-04   362.313507   368.339294   361.488861   366.600616   \n","3     2013-01-07   365.348755   367.301056   362.929504   365.001007   \n","4     2013-01-08   365.393463   365.771027   359.874359   364.280701   \n","...          ...          ...          ...          ...          ...   \n","1254  2017-12-22  1061.109985  1064.199951  1059.439941  1060.119995   \n","1255  2017-12-26  1058.069946  1060.119995  1050.199951  1056.739990   \n","1256  2017-12-27  1057.390015  1058.369995  1048.050049  1049.369995   \n","1257  2017-12-28  1051.599976  1054.750000  1044.770020  1048.140015   \n","1258  2017-12-29  1046.719971  1049.699951  1044.900024  1046.400024   \n","\n","        Adj Close   Volume  \n","0      359.288177  5115500  \n","1      359.496826  4666500  \n","2      366.600616  5562800  \n","3      365.001007  3332900  \n","4      364.280701  3373900  \n","...           ...      ...  \n","1254  1060.119995   755100  \n","1255  1056.739990   760600  \n","1256  1049.369995  1271900  \n","1257  1048.140015   837100  \n","1258  1046.400024   887500  \n","\n","[1259 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-e4e66fb9-0e15-4141-9099-1494b3804f12\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Adj Close</th>\n","      <th>Volume</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-02</td>\n","      <td>357.385559</td>\n","      <td>361.151062</td>\n","      <td>355.959839</td>\n","      <td>359.288177</td>\n","      <td>359.288177</td>\n","      <td>5115500</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-01-03</td>\n","      <td>360.122742</td>\n","      <td>363.600128</td>\n","      <td>358.031342</td>\n","      <td>359.496826</td>\n","      <td>359.496826</td>\n","      <td>4666500</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-01-04</td>\n","      <td>362.313507</td>\n","      <td>368.339294</td>\n","      <td>361.488861</td>\n","      <td>366.600616</td>\n","      <td>366.600616</td>\n","      <td>5562800</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-07</td>\n","      <td>365.348755</td>\n","      <td>367.301056</td>\n","      <td>362.929504</td>\n","      <td>365.001007</td>\n","      <td>365.001007</td>\n","      <td>3332900</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2013-01-08</td>\n","      <td>365.393463</td>\n","      <td>365.771027</td>\n","      <td>359.874359</td>\n","      <td>364.280701</td>\n","      <td>364.280701</td>\n","      <td>3373900</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1254</th>\n","      <td>2017-12-22</td>\n","      <td>1061.109985</td>\n","      <td>1064.199951</td>\n","      <td>1059.439941</td>\n","      <td>1060.119995</td>\n","      <td>1060.119995</td>\n","      <td>755100</td>\n","    </tr>\n","    <tr>\n","      <th>1255</th>\n","      <td>2017-12-26</td>\n","      <td>1058.069946</td>\n","      <td>1060.119995</td>\n","      <td>1050.199951</td>\n","      <td>1056.739990</td>\n","      <td>1056.739990</td>\n","      <td>760600</td>\n","    </tr>\n","    <tr>\n","      <th>1256</th>\n","      <td>2017-12-27</td>\n","      <td>1057.390015</td>\n","      <td>1058.369995</td>\n","      <td>1048.050049</td>\n","      <td>1049.369995</td>\n","      <td>1049.369995</td>\n","      <td>1271900</td>\n","    </tr>\n","    <tr>\n","      <th>1257</th>\n","      <td>2017-12-28</td>\n","      <td>1051.599976</td>\n","      <td>1054.750000</td>\n","      <td>1044.770020</td>\n","      <td>1048.140015</td>\n","      <td>1048.140015</td>\n","      <td>837100</td>\n","    </tr>\n","    <tr>\n","      <th>1258</th>\n","      <td>2017-12-29</td>\n","      <td>1046.719971</td>\n","      <td>1049.699951</td>\n","      <td>1044.900024</td>\n","      <td>1046.400024</td>\n","      <td>1046.400024</td>\n","      <td>887500</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1259 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4e66fb9-0e15-4141-9099-1494b3804f12')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e4e66fb9-0e15-4141-9099-1494b3804f12 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e4e66fb9-0e15-4141-9099-1494b3804f12');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["trainset = dataset_train.iloc[:,1:2].values"],"metadata":{"id":"hM0xKl692egv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["trainset"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9rBHW4hd2mHU","executionInfo":{"status":"ok","timestamp":1669095650106,"user_tz":-330,"elapsed":8,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"13ae075c-8d18-4edf-d2ab-dbdeca9fd7b5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 357.385559],\n","       [ 360.122742],\n","       [ 362.313507],\n","       ...,\n","       [1057.390015],\n","       [1051.599976],\n","       [1046.719971]])"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["from sklearn.preprocessing import MinMaxScaler\n","sc = MinMaxScaler(feature_range = (0,1))\n","training_scaled = sc.fit_transform(trainset)"],"metadata":{"id":"pmbFv3Kg2qEU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["training_scaled"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vq0Kdajc2uNH","executionInfo":{"status":"ok","timestamp":1669095683576,"user_tz":-330,"elapsed":5,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"1ca531d4-58a0-4130-8396-df50f09b9f74"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.01011148],\n","       [0.01388614],\n","       [0.01690727],\n","       ...,\n","       [0.97543954],\n","       [0.9674549 ],\n","       [0.96072522]])"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["x_train = []\n","y_train = []"],"metadata":{"id":"0z5rBDkC2yuD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i in range(60,1259):\n","    x_train.append(training_scaled[i-60:i, 0])\n","    y_train.append(training_scaled[i,0])\n","x_train,y_train = np.array(x_train),np.array(y_train)"],"metadata":{"id":"N_xHvULl24Ak"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DFD67RXK29Ac","executionInfo":{"status":"ok","timestamp":1669095743972,"user_tz":-330,"elapsed":380,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"cb657dee-7dec-4820-dbc2-e7159d7e8ac2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1199, 60)"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["x_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))"],"metadata":{"id":"6zCcRrjZ3Byz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.layers import LSTM\n","from keras.layers import Dropout"],"metadata":{"id":"0G_Cyt1h3F3y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["regressor = Sequential()\n","regressor.add(LSTM(units = 50,return_sequences = True,input_shape = (x_train.shape[1],1)))"],"metadata":{"id":"0LqTUQGz3RTR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["regressor.add(Dropout(0.2))"],"metadata":{"id":"Y68mtLvb3ZLG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["regressor.add(LSTM(units = 50,return_sequences = True))\n","regressor.add(Dropout(0.2))"],"metadata":{"id":"m_7J3cDN3eiZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["regressor.add(LSTM(units = 50,return_sequences = True))\n","regressor.add(Dropout(0.2))"],"metadata":{"id":"uYFHSzjY3vrQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["regressor.add(LSTM(units = 50))\n","regressor.add(Dropout(0.2))"],"metadata":{"id":"YDpzKxJs4FTV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["regressor.add(Dense(units = 1))"],"metadata":{"id":"w37FWLfv4VND"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["regressor.compile(optimizer = 'adam',loss = 'mean_squared_error')"],"metadata":{"id":"aqnwzsaG4hNx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["regressor.fit(x_train,y_train,epochs = 100, batch_size = 32)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7JGUmAXU4mPI","executionInfo":{"status":"ok","timestamp":1669096600452,"user_tz":-330,"elapsed":425099,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"98313286-d8d9-4a53-c750-0ad8dedabb64"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","38/38 [==============================] - 11s 107ms/step - loss: 0.0248\n","Epoch 2/100\n","38/38 [==============================] - 4s 105ms/step - loss: 0.0050\n","Epoch 3/100\n","38/38 [==============================] - 4s 113ms/step - loss: 0.0040\n","Epoch 4/100\n","38/38 [==============================] - 4s 106ms/step - loss: 0.0042\n","Epoch 5/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0037\n","Epoch 6/100\n","38/38 [==============================] - 4s 106ms/step - loss: 0.0034\n","Epoch 7/100\n","38/38 [==============================] - 4s 106ms/step - loss: 0.0031\n","Epoch 8/100\n","38/38 [==============================] - 4s 106ms/step - loss: 0.0035\n","Epoch 9/100\n","38/38 [==============================] - 5s 125ms/step - loss: 0.0038\n","Epoch 10/100\n","38/38 [==============================] - 5s 135ms/step - loss: 0.0033\n","Epoch 11/100\n","38/38 [==============================] - 4s 113ms/step - loss: 0.0031\n","Epoch 12/100\n","38/38 [==============================] - 4s 106ms/step - loss: 0.0030\n","Epoch 13/100\n","38/38 [==============================] - 4s 105ms/step - loss: 0.0027\n","Epoch 14/100\n","38/38 [==============================] - 4s 105ms/step - loss: 0.0028\n","Epoch 15/100\n","38/38 [==============================] - 4s 105ms/step - loss: 0.0032\n","Epoch 16/100\n","38/38 [==============================] - 4s 105ms/step - loss: 0.0024\n","Epoch 17/100\n","38/38 [==============================] - 4s 105ms/step - loss: 0.0026\n","Epoch 18/100\n","38/38 [==============================] - 4s 105ms/step - loss: 0.0026\n","Epoch 19/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0025\n","Epoch 20/100\n","38/38 [==============================] - 4s 106ms/step - loss: 0.0024\n","Epoch 21/100\n","38/38 [==============================] - 4s 106ms/step - loss: 0.0024\n","Epoch 22/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0024\n","Epoch 23/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0024\n","Epoch 24/100\n","38/38 [==============================] - 5s 133ms/step - loss: 0.0026\n","Epoch 25/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0022\n","Epoch 26/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0022\n","Epoch 27/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0021\n","Epoch 28/100\n","38/38 [==============================] - 4s 106ms/step - loss: 0.0023\n","Epoch 29/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0020\n","Epoch 30/100\n","38/38 [==============================] - 4s 106ms/step - loss: 0.0020\n","Epoch 31/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0022\n","Epoch 32/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0025\n","Epoch 33/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0021\n","Epoch 34/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0020\n","Epoch 35/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0020\n","Epoch 36/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0018\n","Epoch 37/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0019\n","Epoch 38/100\n","38/38 [==============================] - 5s 135ms/step - loss: 0.0019\n","Epoch 39/100\n","38/38 [==============================] - 5s 125ms/step - loss: 0.0018\n","Epoch 40/100\n","38/38 [==============================] - 5s 117ms/step - loss: 0.0017\n","Epoch 41/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0020\n","Epoch 42/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0017\n","Epoch 43/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0019\n","Epoch 44/100\n","38/38 [==============================] - 4s 106ms/step - loss: 0.0018\n","Epoch 45/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0018\n","Epoch 46/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0016\n","Epoch 47/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0019\n","Epoch 48/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0020\n","Epoch 49/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0016\n","Epoch 50/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0017\n","Epoch 51/100\n","38/38 [==============================] - 5s 135ms/step - loss: 0.0016\n","Epoch 52/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0016\n","Epoch 53/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0017\n","Epoch 54/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0014\n","Epoch 55/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0017\n","Epoch 56/100\n","38/38 [==============================] - 4s 106ms/step - loss: 0.0015\n","Epoch 57/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0015\n","Epoch 58/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0013\n","Epoch 59/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0014\n","Epoch 60/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0014\n","Epoch 61/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0014\n","Epoch 62/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0016\n","Epoch 63/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0015\n","Epoch 64/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0015\n","Epoch 65/100\n","38/38 [==============================] - 5s 135ms/step - loss: 0.0013\n","Epoch 66/100\n","38/38 [==============================] - 4s 105ms/step - loss: 0.0014\n","Epoch 67/100\n","38/38 [==============================] - 4s 106ms/step - loss: 0.0014\n","Epoch 68/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0014\n","Epoch 69/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0012\n","Epoch 70/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0014\n","Epoch 71/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0012\n","Epoch 72/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0014\n","Epoch 73/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0013\n","Epoch 74/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0014\n","Epoch 75/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0012\n","Epoch 76/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0012\n","Epoch 77/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0013\n","Epoch 78/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0012\n","Epoch 79/100\n","38/38 [==============================] - 5s 135ms/step - loss: 0.0012\n","Epoch 80/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0012\n","Epoch 81/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0011\n","Epoch 82/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0010\n","Epoch 83/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0012\n","Epoch 84/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0010\n","Epoch 85/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0012\n","Epoch 86/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0012\n","Epoch 87/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0011\n","Epoch 88/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0012\n","Epoch 89/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0011\n","Epoch 90/100\n","38/38 [==============================] - 4s 108ms/step - loss: 9.8136e-04\n","Epoch 91/100\n","38/38 [==============================] - 4s 108ms/step - loss: 0.0011\n","Epoch 92/100\n","38/38 [==============================] - 4s 116ms/step - loss: 0.0011\n","Epoch 93/100\n","38/38 [==============================] - 5s 125ms/step - loss: 9.0463e-04\n","Epoch 94/100\n","38/38 [==============================] - 5s 131ms/step - loss: 0.0013\n","Epoch 95/100\n","38/38 [==============================] - 4s 109ms/step - loss: 0.0011\n","Epoch 96/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0010\n","Epoch 97/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0011\n","Epoch 98/100\n","38/38 [==============================] - 4s 107ms/step - loss: 9.7983e-04\n","Epoch 99/100\n","38/38 [==============================] - 4s 106ms/step - loss: 0.0011\n","Epoch 100/100\n","38/38 [==============================] - 4s 107ms/step - loss: 0.0013\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fd452dea090>"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["dataset_test =pd.read_csv(\"testset (1).csv\")"],"metadata":{"id":"UqKHSCh06Se_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["real_stock_price = dataset_test.iloc[:,1:2].values"],"metadata":{"id":"kJHQT0pE6nO8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dataset_total = pd.concat((dataset_train['Open'],dataset_test['Open']),axis = 0)\n","dataset_total"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z_gDkubn6xzP","executionInfo":{"status":"ok","timestamp":1669097982696,"user_tz":-330,"elapsed":1043,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"25d79750-5ad7-487a-97d6-ed7dac033974"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       357.385559\n","1       360.122742\n","2       362.313507\n","3       365.348755\n","4       365.393463\n","          ...     \n","120    1143.599976\n","121    1128.000000\n","122    1121.339966\n","123    1102.089966\n","124    1120.000000\n","Name: Open, Length: 1384, dtype: float64"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["inputs = dataset_total[len(dataset_total) - len(dataset_test)-60:].values\n","inputs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2PpOGiPC7RSS","executionInfo":{"status":"ok","timestamp":1669097631766,"user_tz":-330,"elapsed":626,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"5d2c113e-a263-4dc0-a197-b5d02837c46b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 955.48999 ,  966.700012,  980.      ,  980.      ,  973.719971,\n","        987.450012,  992.      ,  992.099976,  990.289978,  991.77002 ,\n","        986.      ,  989.440002,  989.52002 ,  970.      ,  968.369995,\n","        980.      , 1009.190002, 1014.      , 1015.219971, 1017.210022,\n","       1021.76001 , 1022.109985, 1028.98999 , 1027.27002 , 1030.52002 ,\n","       1033.98999 , 1026.459961, 1023.419983, 1022.590027, 1019.210022,\n","       1022.52002 , 1034.01001 , 1020.26001 , 1023.309998, 1035.      ,\n","       1035.869995, 1040.      , 1055.089966, 1042.680054, 1022.369995,\n","       1015.799988, 1012.659973,  995.940002, 1001.5     , 1020.429993,\n","       1037.48999 , 1035.5     , 1039.630005, 1046.119995, 1045.      ,\n","       1054.609985, 1066.079956, 1075.199951, 1071.780029, 1064.949951,\n","       1061.109985, 1058.069946, 1057.390015, 1051.599976, 1046.719971,\n","       1048.339966, 1064.310059, 1088.      , 1094.      , 1102.22998 ,\n","       1109.400024, 1097.099976, 1106.300049, 1102.410034, 1132.51001 ,\n","       1126.219971, 1131.410034, 1131.829956, 1137.48999 , 1159.849976,\n","       1177.329956, 1172.530029, 1175.079956, 1176.47998 , 1167.829956,\n","       1170.569946, 1162.609985, 1122.      , 1090.599976, 1027.180054,\n","       1081.540039, 1055.410034, 1017.25    , 1048.      , 1045.      ,\n","       1048.949951, 1079.069946, 1088.410034, 1090.569946, 1106.469971,\n","       1116.189941, 1112.640015, 1127.800049, 1141.23999 , 1123.030029,\n","       1107.869995, 1053.079956, 1075.140015, 1099.219971, 1089.189941,\n","       1115.319946, 1136.      , 1163.849976, 1170.      , 1145.209961,\n","       1149.959961, 1154.140015, 1120.01001 , 1099.      , 1092.73999 ,\n","       1081.880005, 1047.030029, 1046.      , 1063.      ,  998.      ,\n","       1011.630005, 1022.820007, 1013.909973,  993.409973, 1041.329956,\n","       1020.      , 1016.799988, 1026.439941, 1027.98999 , 1025.040039,\n","       1040.880005, 1037.      , 1051.369995, 1077.430054, 1069.400024,\n","       1082.      , 1077.859985, 1052.      , 1025.52002 , 1029.51001 ,\n","       1046.      , 1030.01001 , 1013.659973, 1028.099976, 1019.      ,\n","       1016.900024, 1049.22998 , 1058.540039, 1058.099976, 1086.030029,\n","       1093.599976, 1100.      , 1090.      , 1077.310059, 1079.890015,\n","       1061.859985, 1074.060059, 1083.560059, 1065.130005, 1079.      ,\n","       1079.02002 , 1064.890015, 1063.030029, 1067.560059, 1099.349976,\n","       1122.329956, 1140.98999 , 1142.170044, 1131.319946, 1118.180054,\n","       1118.599976, 1131.069946, 1141.119995, 1143.849976, 1148.859985,\n","       1143.650024, 1158.5     , 1175.310059, 1174.849976, 1159.140015,\n","       1143.599976, 1128.      , 1121.339966, 1102.089966, 1120.      ])"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["inputs = inputs.reshape(-1,1)"],"metadata":{"id":"tpqL3ffX_uG_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["inputs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G_LVdFYy_zVu","executionInfo":{"status":"ok","timestamp":1669098065590,"user_tz":-330,"elapsed":1001,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"5df05feb-52b7-4d7d-cd60-37e8a95aa0cf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 955.48999 ],\n","       [ 966.700012],\n","       [ 980.      ],\n","       [ 980.      ],\n","       [ 973.719971],\n","       [ 987.450012],\n","       [ 992.      ],\n","       [ 992.099976],\n","       [ 990.289978],\n","       [ 991.77002 ],\n","       [ 986.      ],\n","       [ 989.440002],\n","       [ 989.52002 ],\n","       [ 970.      ],\n","       [ 968.369995],\n","       [ 980.      ],\n","       [1009.190002],\n","       [1014.      ],\n","       [1015.219971],\n","       [1017.210022],\n","       [1021.76001 ],\n","       [1022.109985],\n","       [1028.98999 ],\n","       [1027.27002 ],\n","       [1030.52002 ],\n","       [1033.98999 ],\n","       [1026.459961],\n","       [1023.419983],\n","       [1022.590027],\n","       [1019.210022],\n","       [1022.52002 ],\n","       [1034.01001 ],\n","       [1020.26001 ],\n","       [1023.309998],\n","       [1035.      ],\n","       [1035.869995],\n","       [1040.      ],\n","       [1055.089966],\n","       [1042.680054],\n","       [1022.369995],\n","       [1015.799988],\n","       [1012.659973],\n","       [ 995.940002],\n","       [1001.5     ],\n","       [1020.429993],\n","       [1037.48999 ],\n","       [1035.5     ],\n","       [1039.630005],\n","       [1046.119995],\n","       [1045.      ],\n","       [1054.609985],\n","       [1066.079956],\n","       [1075.199951],\n","       [1071.780029],\n","       [1064.949951],\n","       [1061.109985],\n","       [1058.069946],\n","       [1057.390015],\n","       [1051.599976],\n","       [1046.719971],\n","       [1048.339966],\n","       [1064.310059],\n","       [1088.      ],\n","       [1094.      ],\n","       [1102.22998 ],\n","       [1109.400024],\n","       [1097.099976],\n","       [1106.300049],\n","       [1102.410034],\n","       [1132.51001 ],\n","       [1126.219971],\n","       [1131.410034],\n","       [1131.829956],\n","       [1137.48999 ],\n","       [1159.849976],\n","       [1177.329956],\n","       [1172.530029],\n","       [1175.079956],\n","       [1176.47998 ],\n","       [1167.829956],\n","       [1170.569946],\n","       [1162.609985],\n","       [1122.      ],\n","       [1090.599976],\n","       [1027.180054],\n","       [1081.540039],\n","       [1055.410034],\n","       [1017.25    ],\n","       [1048.      ],\n","       [1045.      ],\n","       [1048.949951],\n","       [1079.069946],\n","       [1088.410034],\n","       [1090.569946],\n","       [1106.469971],\n","       [1116.189941],\n","       [1112.640015],\n","       [1127.800049],\n","       [1141.23999 ],\n","       [1123.030029],\n","       [1107.869995],\n","       [1053.079956],\n","       [1075.140015],\n","       [1099.219971],\n","       [1089.189941],\n","       [1115.319946],\n","       [1136.      ],\n","       [1163.849976],\n","       [1170.      ],\n","       [1145.209961],\n","       [1149.959961],\n","       [1154.140015],\n","       [1120.01001 ],\n","       [1099.      ],\n","       [1092.73999 ],\n","       [1081.880005],\n","       [1047.030029],\n","       [1046.      ],\n","       [1063.      ],\n","       [ 998.      ],\n","       [1011.630005],\n","       [1022.820007],\n","       [1013.909973],\n","       [ 993.409973],\n","       [1041.329956],\n","       [1020.      ],\n","       [1016.799988],\n","       [1026.439941],\n","       [1027.98999 ],\n","       [1025.040039],\n","       [1040.880005],\n","       [1037.      ],\n","       [1051.369995],\n","       [1077.430054],\n","       [1069.400024],\n","       [1082.      ],\n","       [1077.859985],\n","       [1052.      ],\n","       [1025.52002 ],\n","       [1029.51001 ],\n","       [1046.      ],\n","       [1030.01001 ],\n","       [1013.659973],\n","       [1028.099976],\n","       [1019.      ],\n","       [1016.900024],\n","       [1049.22998 ],\n","       [1058.540039],\n","       [1058.099976],\n","       [1086.030029],\n","       [1093.599976],\n","       [1100.      ],\n","       [1090.      ],\n","       [1077.310059],\n","       [1079.890015],\n","       [1061.859985],\n","       [1074.060059],\n","       [1083.560059],\n","       [1065.130005],\n","       [1079.      ],\n","       [1079.02002 ],\n","       [1064.890015],\n","       [1063.030029],\n","       [1067.560059],\n","       [1099.349976],\n","       [1122.329956],\n","       [1140.98999 ],\n","       [1142.170044],\n","       [1131.319946],\n","       [1118.180054],\n","       [1118.599976],\n","       [1131.069946],\n","       [1141.119995],\n","       [1143.849976],\n","       [1148.859985],\n","       [1143.650024],\n","       [1158.5     ],\n","       [1175.310059],\n","       [1174.849976],\n","       [1159.140015],\n","       [1143.599976],\n","       [1128.      ],\n","       [1121.339966],\n","       [1102.089966],\n","       [1120.      ]])"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","source":["inputs = sc.transform(inputs)\n","inputs.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b3DeBP1_7W9c","executionInfo":{"status":"ok","timestamp":1669098080139,"user_tz":-330,"elapsed":374,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"47b4b1be-8ed1-4c4a-f151-c1a94c99663c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(185, 1)"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["x_test = []\n","for i in range(60,185):\n","    x_test.append(inputs[i-60:i,0])"],"metadata":{"id":"-JjgjfnbAFP7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_test = np.array(x_test)\n","x_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CCbkvmA77h4b","executionInfo":{"status":"ok","timestamp":1669098144677,"user_tz":-330,"elapsed":390,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"a145102e-a180-4e97-b56e-b2260ff3b19c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(125, 60)"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":["x_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))\n","x_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ly692AnxAD7s","executionInfo":{"status":"ok","timestamp":1669098163150,"user_tz":-330,"elapsed":7,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"571ae9f4-0fbd-4c7c-e079-cc30ebdaf36e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(125, 60, 1)"]},"metadata":{},"execution_count":68}]},{"cell_type":"code","source":["predicted_price = regressor.predict(x_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0hMGFVaNAS30","executionInfo":{"status":"ok","timestamp":1669098194612,"user_tz":-330,"elapsed":2129,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"daea1d57-eff7-4b1f-a3c3-d649096ce7c2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4/4 [==============================] - 2s 27ms/step\n"]}]},{"cell_type":"code","source":["predicted_price = sc.inverse_transform(predicted_price)\n","predicted_price"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OEfkvVVBAZtR","executionInfo":{"status":"ok","timestamp":1669098226111,"user_tz":-330,"elapsed":594,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"37d46273-5c38-461a-b48c-9df32675783a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1055.0978],\n","       [1054.1947],\n","       [1056.8928],\n","       [1065.2865],\n","       [1075.4921],\n","       [1084.5242],\n","       [1091.3698],\n","       [1093.1396],\n","       [1093.3794],\n","       [1092.9711],\n","       [1098.0416],\n","       [1104.4767],\n","       [1110.3987],\n","       [1114.6907],\n","       [1118.3018],\n","       [1125.011 ],\n","       [1135.1875],\n","       [1143.5637],\n","       [1148.8824],\n","       [1151.865 ],\n","       [1152.0442],\n","       [1151.7921],\n","       [1150.8496],\n","       [1143.4307],\n","       [1129.4213],\n","       [1105.9175],\n","       [1092.0371],\n","       [1085.5419],\n","       [1077.1221],\n","       [1072.7721],\n","       [1071.6481],\n","       [1072.0612],\n","       [1077.0787],\n","       [1084.3188],\n","       [1089.8771],\n","       [1094.7307],\n","       [1099.4785],\n","       [1102.2367],\n","       [1105.7537],\n","       [1111.707 ],\n","       [1114.63  ],\n","       [1112.4725],\n","       [1099.6094],\n","       [1088.2365],\n","       [1087.0929],\n","       [1091.0988],\n","       [1100.0652],\n","       [1112.4658],\n","       [1127.4655],\n","       [1140.1484],\n","       [1143.141 ],\n","       [1140.8516],\n","       [1138.3182],\n","       [1131.5681],\n","       [1120.9745],\n","       [1110.8011],\n","       [1102.7062],\n","       [1092.3778],\n","       [1082.695 ],\n","       [1079.013 ],\n","       [1069.0352],\n","       [1057.8633],\n","       [1051.1788],\n","       [1047.2551],\n","       [1041.0671],\n","       [1041.6926],\n","       [1043.0063],\n","       [1041.866 ],\n","       [1040.391 ],\n","       [1039.4094],\n","       [1038.2151],\n","       [1039.5977],\n","       [1041.6309],\n","       [1045.5422],\n","       [1054.1791],\n","       [1061.9552],\n","       [1068.6198],\n","       [1072.477 ],\n","       [1069.5083],\n","       [1059.178 ],\n","       [1048.7426],\n","       [1045.262 ],\n","       [1044.7617],\n","       [1042.3198],\n","       [1041.1213],\n","       [1039.8368],\n","       [1037.9369],\n","       [1041.3794],\n","       [1048.9445],\n","       [1055.7953],\n","       [1064.2916],\n","       [1072.916 ],\n","       [1080.078 ],\n","       [1082.7261],\n","       [1080.1407],\n","       [1076.4756],\n","       [1071.2653],\n","       [1069.0807],\n","       [1071.7443],\n","       [1073.4346],\n","       [1075.8254],\n","       [1078.3933],\n","       [1077.888 ],\n","       [1075.155 ],\n","       [1072.9482],\n","       [1077.4526],\n","       [1088.8792],\n","       [1103.5425],\n","       [1115.2073],\n","       [1119.6139],\n","       [1116.9209],\n","       [1112.1404],\n","       [1110.9855],\n","       [1114.8685],\n","       [1121.1022],\n","       [1127.5758],\n","       [1131.5736],\n","       [1135.8541],\n","       [1142.6396],\n","       [1149.0822],\n","       [1150.7207],\n","       [1146.8224],\n","       [1139.0796],\n","       [1131.0695],\n","       [1122.6232]], dtype=float32)"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["plt.plot(real_stock_price,color = 'red', label = 'Real Price')\n","plt.plot(predicted_price, color = 'blue', label = 'Predicted Price')\n","plt.title('Google Stock Price Prediction')\n","plt.xlabel('Time')\n","plt.ylabel('Google Stock Price')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"k61P1-UAAhfe","executionInfo":{"status":"ok","timestamp":1669098253217,"user_tz":-330,"elapsed":636,"user":{"displayName":"Lathashree B","userId":"14029181975261974708"}},"outputId":"4e058bef-701d-415e-edb0-23709a723e6f","colab":{"base_uri":"https://localhost:8080/","height":295}},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}